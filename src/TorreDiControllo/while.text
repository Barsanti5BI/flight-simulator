//Senza Pilota (non funzionante)
      while (false) {
         //System.out.println(PrimaPistaDisp());

         try {
            Thread.sleep(3);
         } catch (Exception e) {
            System.out.println(e);
         }
         //prende la lista degli aerei che hanno finito il viaggio
         viaggiFiniti = DammiViaggiFiniti(viaggiFiniti);

         try {
            Thread.sleep(1000);
         } catch (Exception e) {
            System.out.println(e);
         }//debug----------------------------------------------------------------------

         //Mette gli aerei dentro le varie piste disponibili, controllando anche il gate specifico, se una di queste variabili non
         //non è disponibile allora verrà avviato un timer in modo che l'aereo viaggi ancora fino a che non verrà trovata una pista libera
         if (!viaggiFiniti.isEmpty()) {

            for (int i = 0; i < viaggiFiniti.size(); i++) {
               Viaggio viaggioArrivato = viaggiFiniti.get(i);
               Aereo arrivato = viaggiFiniti.get(i).a;
               primaPistaDisp = PrimaPistaDisp();
               if (primaPistaDisp != -1 && parcheggiGate.get(viaggi.get(i).numGate).aereo == null)// controllo pista libera e parcheggioGate libero
               {
                  //piste.get(primaPistaDisp).aereo = arrivato;//metto l'aereo nella pista

                  //Dire al pilota di atterrare sulla pista giusta(metodo PrimaPistaDisp()),tramite blackBox

                  System.out.println("L'aereo " + arrivato.DammiID() + " è atterrato");
               } else {
                  //caso in cui bisogna mandare l'aereo in un altro aereoporto o farlo girare intorno se ha benzina fino a che non avrà
                  //il{ posto, quindi qui lo si pusha dentro viaggi con un timer proporzionato e controllando il livelo di benzina
                /*  if (arrivato.serbatoio.capacità < 10)
                  {
                     viaggiFiniti.remove(i);
                     viaggiFiniti = null;
                  }
                  else
                  {
                     viaggiFiniti.get(i).cambiaTimer(1);
                  }*/

               }
               //Parcheggi


               //mettere dentro i passeggeri


            }

         }

      }
package Persona;
import Aereo.Aereo;
import TorreDiControllo.*;

import java.util.Random;


public class Pilota{
    private Aereo a;
    private TorreControllo tC;
    private int pista;//pista di atterraggio assegnata inizialmente = -1
    private boolean deveAtterare; // true --> aereo atterra // false --> aereo decolla // non so se si fa  // non so se serva
    private Parcheggio parcheggio;
    private int ritardoArrivo;

    public Pilota(Aereo a, TorreControllo tC, boolean deveAtterare)
    {
        this.a = a;
        this.tC = tC;
        pista = -1;
        parcheggio = null;
        this.deveAtterare = deveAtterare;
        ritardoArrivo = 0;
    }

    public void run(){

        // metodo per far partire l'aereo
        // chiedo meteo
        // chiedo pista
        // accendo l'aereo
        // metto l'aereo dentro pista

        // metodo blackbox

        // metodo ritardo
        // genero random un ritardo in caso di mal tempo
        // ve lo invio

        while(true)
        {
            tC.getCodaPilotiRichiestePista().push(this);

            synchronized (tC)
            {
                while(pista == -1)
                {
                    tC.wait();
                }
            }



            if(!deveAtterare) // decolla
            {
                pista.aereo = null;
               // a.AvviaVolo = true;
            }
            else // atterra    //--------------------------------------Qui il pilota dovrebbe mettere l'aereo nella pista assegnata---------------------------------------------------
            {
                try {
                    Thread.sleep(ritardoArrivo);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }

                a.inVolo = false;


                tC.getCodaPilotiRichiesteParcheggio().push(this);
                synchronized (tC) //prima nella pista poi parcheggio
                {
                    while(parcheggio != null)
                    {
                        tC.wait();
                    }
                }
            }
        }
    }

    public void AtterraODecolla(boolean aOt)
    {
        deveAtterare = aOt;

    }
    public boolean verficaCondMeteo()
    {
        String meteoAttuale = tC.dimmiMeteoAttuale();
        daiDatiScatolaNera(meteoAttuale);

        for(String meteoProibiti : tC.getCondMeteoProibite())
        {
            if (meteoAttuale == meteoProibiti)
            {
                return false;
            }
        }

        return true;
    }

    public void setPista(int p)
    {
        this.pista = p;
        daiDatiScatolaNera("Pista" + p.getId());
    }

    public void daiDatiScatolaNera(String comunicazione)
    {
        a.getScatolaNera().InserisciComunicazione(comunicazione);
    }

    public void inviaComuncazioneTC(String comunicazione)
    {
        tC.invioCom(comunicazione);
    }

    public void setParcheggio(Parcheggio p)
    {
        this.parcheggio = p;
        daiDatiScatolaNera("Parcheggio" + p.getId());
    }
}